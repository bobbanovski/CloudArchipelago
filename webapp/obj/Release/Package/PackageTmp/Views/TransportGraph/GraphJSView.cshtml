@model SmartAdminMvc.ArchipelagoModel.ViewModels.TransportViewModel

@*C# Pre Processing*@
@{
    //Initialise all strings for graph input
    string labelsPreString = "[";
    string optionsPreString = "{";
    optionsPreString += "scaleBeginAtZero: true," +  //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
            "scaleShowGridLines: true," +       //Boolean - Whether grid lines are shown across the chart
            "scaleGridLineColor:" + '"' + "rgba(0,0,0,.2)" + '"' + "," +        //String - Colour of the grid lines
            "scaleGridLineWidth: 1," +          //Number - Width of the grid lines
            "barShowStroke: true," +            //Boolean - If there is a stroke on each bar
            "barStrokeWidth: 1," +              //Number - Pixel width of the bar stroke
            "barValueSpacing: 5," +             //Number - Spacing between each of the X value sets
            "barDatasetSpacing: 1," +           //Number - Spacing between data sets within X values
            "responsive: true,";               //Boolean - Re-draw chart on page resize
            //"legendTemplate: <ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>";
    string optionsString = (optionsPreString.Substring(0, optionsPreString.Length - 1)) + '}';

    string AlbPreString = "";
    string BalPreString = "";
    string BosPreString = "";
    string ChiPreString = "";
    string ColPreString = "";
    string DalPreString = "";
    string DenPreString = "";
    string DetPreString = "";
    string HouPreString = "";
    string IndPreString = "";
    string KanPreString = "";
    string LosPreString = "";
    string MiaPreString = "";
    string MonPreString = "";
    string PorPreString = "";
    string RalPreString = "";
    string StpPreString = "";
    string SanPreString = "";

    foreach(var state in Model.StateView)
    {
        labelsPreString += '"' + state.Name + '"' + ',';

        var unit = state.Units.Where(u => u.SupplyNode == "Albuquerque" && u.DemandNode == state.Name).Single();
        AlbPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Baltimore" && u.DemandNode == state.Name).Single();
        BalPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Boston" && u.DemandNode == state.Name).Single();
        BosPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Chicago" && u.DemandNode == state.Name).Single();
        ChiPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Columbus" && u.DemandNode == state.Name).Single();
        ColPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Dallas" && u.DemandNode == state.Name).Single();
        DalPreString += unit.Supplied.ToString() + ",";

        unit = state.Units.Where(u => u.SupplyNode == "Denver" && u.DemandNode == state.Name).Single();
        DenPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Detroit" && u.DemandNode == state.Name).Single();
        DetPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Houston" && u.DemandNode == state.Name).Single();
        HouPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Indianapollis" && u.DemandNode == state.Name).Single();
        IndPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Kansas City" && u.DemandNode == state.Name).Single();
        KanPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Los Angelis" && u.DemandNode == state.Name).Single();
        LosPreString += unit.Supplied.ToString() + ",";

        unit = state.Units.Where(u => u.SupplyNode == "Miami" && u.DemandNode == state.Name).Single();
        MiaPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Montreal" && u.DemandNode == state.Name).Single();
        MonPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Portland" && u.DemandNode == state.Name).Single();
        PorPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "Raleigh" && u.DemandNode == state.Name).Single();
        RalPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "St Paul" && u.DemandNode == state.Name).Single();
        StpPreString += unit.Supplied.ToString() + ",";
        unit = state.Units.Where(u => u.SupplyNode == "San Francisco" && u.DemandNode == state.Name).Single();
        SanPreString += unit.Supplied.ToString() + ",";
    }
    labelsPreString = (labelsPreString.Substring(0, labelsPreString.Length - 1)) + ']';

    AlbPreString = AlbPreString.Substring(0, AlbPreString.Length - 1);
    BalPreString = BalPreString.Substring(0, BalPreString.Length - 1);
    BosPreString = BosPreString.Substring(0, BosPreString.Length - 1);
    ChiPreString = ChiPreString.Substring(0, ChiPreString.Length - 1);
    ColPreString = ColPreString.Substring(0, ColPreString.Length - 1);
    DalPreString = DalPreString.Substring(0, DalPreString.Length - 1);

    DenPreString = DenPreString.Substring(0, DenPreString.Length - 1);
    DetPreString = DetPreString.Substring(0, DetPreString.Length - 1);
    HouPreString = HouPreString.Substring(0, HouPreString.Length - 1);
    IndPreString = IndPreString.Substring(0, IndPreString.Length - 1);
    KanPreString = KanPreString.Substring(0, KanPreString.Length - 1);
    LosPreString = LosPreString.Substring(0, LosPreString.Length - 1);

    MiaPreString = MiaPreString.Substring(0, MiaPreString.Length - 1);
    MonPreString = MonPreString.Substring(0, MonPreString.Length - 1);
    PorPreString = PorPreString.Substring(0, PorPreString.Length - 1);
    RalPreString = RalPreString.Substring(0, RalPreString.Length - 1);
    StpPreString = StpPreString.Substring(0, StpPreString.Length - 1);
    SanPreString = SanPreString.Substring(0, SanPreString.Length - 1);
}
<!-- Albuquerque Graph-->
<article class="col-xs-12 col-sm-6 col-md-6 col-lg-8 pull-right">
    <!-- Widget ID (each widget will need unique ID)-->
    <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-deletebutton="false"
         data-widget-editbutton="false" data-widget-sortable="false">
        <header>
            <span class="widget-icon"> <i class="glyphicon glyphicon-signal"></i> </span>
            <h2>Albuquerque - Deliver to:</h2>
        </header>
        <!-- widget div-->
        <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->
                <input class="form-control" type="text">
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body">
                <!-- chart area -->
                <canvas id="albChart" height="120" width="600"></canvas>
            </div>
            <!-- end widget content -->
        </div>
        <!-- end widget div -->
    </div>
</article> <!-- Alb Graph-->

<!-- Baltimore Graph-->
<article class="col-xs-12 col-sm-6 col-md-6 col-lg-8 pull-right">
    <!-- Widget ID (each widget will need unique ID)-->
    <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-deletebutton="false"
         data-widget-editbutton="false" data-widget-sortable="false">
        <header>
            <span class="widget-icon"> <i class="glyphicon glyphicon-signal"></i> </span>
            <h2>Baltimore - Deliver to:</h2>
        </header>
        <!-- widget div-->
        <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->
                <input class="form-control" type="text">
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body">
                <!-- chart area -->
                <canvas id="balChart" height="120" width="600"></canvas>
            </div>
            <!-- end widget content -->
        </div>
        <!-- end widget div -->
    </div>
</article> <!-- Bal Graph-->

<!-- Boston Graph-->
<article class="col-xs-12 col-sm-6 col-md-6 col-lg-8 pull-right">
    <!-- Widget ID (each widget will need unique ID)-->
    <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-deletebutton="false"
         data-widget-editbutton="false" data-widget-sortable="false">
        <header>
            <span class="widget-icon"> <i class="glyphicon glyphicon-signal"></i> </span>
            <h2>Boston - Deliver to:</h2>
        </header>
        <!-- widget div-->
        <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->
                <input class="form-control" type="text">
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body">
                <!-- chart area -->
                <canvas id="bosChart" height="120" width="600"></canvas>
            </div>
            <!-- end widget content -->
        </div>
        <!-- end widget div -->
    </div>
</article> <!-- Bal Graph-->

<!-- Columbus Graph-->
<article class="col-xs-12 col-sm-6 col-md-6 col-lg-8 pull-right">
    <!-- Widget ID (each widget will need unique ID)-->
    <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-colorbutton="false" data-widget-deletebutton="false"
         data-widget-editbutton="false" data-widget-sortable="false">
        <header>
            <span class="widget-icon"> <i class="glyphicon glyphicon-signal"></i> </span>
            <h2>Columbus - Deliver to:</h2>
        </header>
        <!-- widget div-->
        <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
                <!-- This area used as dropdown edit box -->
                <input class="form-control" type="text">
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body">
                <!-- chart area -->
                <canvas id="colChart" height="120" width="600"></canvas>
            </div>
            <!-- end widget content -->
        </div>
        <!-- end widget div -->
    </div>
</article> <!-- Col Graph-->

<script type="text/javascript">

        // GLOBAL FUNCTIONS

    $(document).ready(function () {

        //Charts

        pageSetUp();

        //Albuerque
        var barOptions = @Html.Raw(optionsString);
        var labels = @Html.Raw(labelsPreString);
        var albuquerque = @Html.Raw(Json.Encode(AlbPreString).ToString());
        var datasetsString = '[{"label": "Columbus","fillColor": "rgba(51, 51, 204,0.8)", "strokeColor": "rgba(220,220,220,0.8)", "highlightFill": "rgba(220,220,220,0.75)", "highlightStroke": "rgba(51, 102, 255,1)", "data": [' + albuquerque + '] } ]'
        var datasets = JSON.parse(datasetsString);
        //    //String - A legend template
        //    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
        var barData = {
            labels,
            datasets
        };
        // render Albuerque Chart
        var ctx = document.getElementById("albChart").getContext("2d");
        var myNewChart = new Chart(ctx).Bar(barData, barOptions);

        //Baltimore
        var barOptions = @Html.Raw(optionsString);
        var labels = @Html.Raw(labelsPreString);
        var baltimore = @Html.Raw(Json.Encode(BalPreString).ToString());
        var datasetsString = '[{"label": "Columbus","fillColor": "rgba(51, 51, 204,0.8)", "strokeColor": "rgba(220,220,220,0.8)", "highlightFill": "rgba(220,220,220,0.75)", "highlightStroke": "rgba(51, 102, 255,1)", "data": [' + baltimore + '] } ]'
        var datasets = JSON.parse(datasetsString);
        //    //String - A legend template
        //    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
        var barData = {
            labels,
            datasets
        };
        // render Baltimore Chart
        var ctx = document.getElementById("balChart").getContext("2d");
        var myNewChart = new Chart(ctx).Bar(barData, barOptions);

        //Boston
        var barOptions = @Html.Raw(optionsString);
        var labels = @Html.Raw(labelsPreString);
        var boston = @Html.Raw(Json.Encode(BosPreString).ToString());
        var datasetsString = '[{"label": "Boston","fillColor": "rgba(51, 51, 204,0.8)", "strokeColor": "rgba(220,220,220,0.8)", "highlightFill": "rgba(220,220,220,0.75)", "highlightStroke": "rgba(51, 102, 255,1)", "data": [' + boston + '] } ]'
        var datasets = JSON.parse(datasetsString);
        //    //String - A legend template
        //    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
        var barData = {
            labels,
            datasets
        };
        // render Albuerque Chart
        var ctx = document.getElementById("bosChart").getContext("2d");
        var myNewChart = new Chart(ctx).Bar(barData, barOptions);

        //Colorado
        var barOptions = @Html.Raw(optionsString);
        var labels = @Html.Raw(labelsPreString);
        var columbus = @Html.Raw(Json.Encode(ColPreString).ToString());
        var datasetsString = '[{"label": "Columbus","fillColor": "rgba(51, 51, 204,0.8)", "strokeColor": "rgba(220,220,220,0.8)", "highlightFill": "rgba(220,220,220,0.75)", "highlightStroke": "rgba(51, 102, 255,1)", "data": [' + columbus + '] } ]'
        var datasets = JSON.parse(datasetsString);
        //    //String - A legend template
        //    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
        var barData = {
            labels,
            datasets
        };
        // render Colorado Chart
        var ctx = document.getElementById("colChart").getContext("2d");
        var myNewChart = new Chart(ctx).Bar(barData, barOptions);
    })
</script>
